return(correlationIndicator)
}
# current portfolio -------------------------------------------------------
year2006 <- read.csv("2006.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2007 <- read.csv("2007.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2008 <- read.csv("2008.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2009 <- read.csv("2009.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2010 <- read.csv("2010.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2011 <- read.csv("2011.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2012 <- read.csv("2012.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2013 <- read.csv("2013.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
year2014 <- read.csv("2014.csv", as.is=TRUE, header = TRUE, stringsAsFactors = FALSE)
total_portfolio <- rbind(year2006[1:2, ],
year2007[1:16, ],
year2008[1:14, ],
year2009[1:24, ],
year2010[1:34, ],
year2011[1:26, ],
year2012[1:26, ],
year2013[1:26, ],
year2014[1:22, ])
mom_tickers <- sort(unique(total_portfolio[, 3]))
all_dates   <- seq(as.Date("2012-12-01"), as.Date("2014-12-01"), by = 1)
initial_portfolio <- data.frame(AAPL  = rep(0, length(all_dates)),
AGG   = rep(0, length(all_dates)),
ATVI  = rep(0, length(all_dates)),
DLB   = rep(0, length(all_dates)),
FORD  = rep(0, length(all_dates)),
GOOGL = rep(0, length(all_dates)),
HAS   = rep(0, length(all_dates)),
LF    = rep(0, length(all_dates)),
LUV   = rep(0, length(all_dates)),
SPY   = rep(0, length(all_dates)),
TIBX  = rep(0, length(all_dates)))
# fill positions
initial_portfolio["2012-12-10","AAPL"]                  <- 1
initial_portfolio[c("2006-12-12","2007-01-09","2007-02-13",
"2007-03-13","2007-04-10","2007-05-08",
"2007-06-12","2007-07-10","2008-07-08",
"2008-08-12","2008-09-09","2008-10-14",
"2008-11-11","2008-12-09","2009-01-13",
"2009-02-10","2009-03-10","2009-04-14",
"2009-05-12","2009-06-09","2009-07-14",
"2009-08-11","2009-09-08","2009-10-13",
"2009-11-10","2009-12-08","2010-01-12",
"2010-02-09","2010-03-09","2010-04-13",
"2010-05-11","2010-06-08","2010-07-13",
"2010-08-10","2010-09-14","2010-10-12",
"2010-11-09","2010-12-14","2011-01-11",
"2011-02-08","2011-03-08","2011-04-12",
"2011-05-10","2011-06-14","2011-07-12",
"2011-08-09","2011-09-13","2011-10-11",
"2011-11-08","2011-12-07","2011-12-13",
"2012-01-10","2012-02-14","2012-03-13",
"2012-04-10","2012-05-08","2012-06-12",
"2012-08-14","2012-09-11","2012-10-09",
"2012-11-13","2012-12-11","2013-01-08",
"2013-02-12","2013-03-12","2013-04-09",
"2013-05-14","2013-06-11","2013-07-09",
"2013-08-13","2013-09-10","2013-10-08",
"2013-11-12","2013-12-10","2014-01-14",
"2014-02-11","2014-03-11","2014-04-08",
"2014-05-13","2014-06-10","2014-07-08",
"2014-08-12","2014-09-09","2014-10-14",
"2014-11-11"), "AGG"]               <- 1
initial_portfolio[c("2010-04-30","2010-05-20"),"ATVI"]  <- 1
initial_portfolio[c("2010-04-30","2010-05-05",
"2010-05-21"), "DLB"]               <- 1
initial_portfolio[c("2010-08-24"), "GOOGL"]             <- 1
initial_portfolio[c("2010-04-30"), "HAS"]               <- 1
"2007-11-08",
"2007-12-10","2008-02-04","2012-07-10","2012-12-10","2013-12-06",
initial_xts <- xts(initial_portfolio, order.by = all_dates)
# backtesting assumptions -------------------------------------------------
## Define frictions (as percentage of trade)
commission_pct <- c(.0003)
slippage_pct <- c(.0005)
friction_pct  <- commission_pct + slippage_pct
## Data dates
start_date  <- as.Date("2007-04-01")
end_date    <- as.Date("2014-12-01")
# download data -----------------------------------------------------------
#universe <- c("SPY", "MDY", "IWM",         # Large-Mid-Small Cap equities
#              "EFA", "EEM",                # Intl.and emerging markets
#              "AGG", "TIP", "TLT", "LQD",  # Bonds
#              "GSG", "DBE", "GLD",         # Commodities, Energy, Gold
#              "RWR", "RWX", "VNQ", "MBB")  # Real Estate
universe <- c("SPY", "MDY", "IWM",
"EFA", "EEM", "AGG",
"TIP", "GSG", "RWR",
"RWX", "TLT", "LQD",
"MBB")
# "SHV"
cash_ticker <- c("VFISX")
all_symbols <- c(universe,cash_ticker)
# first download
getSymbols(all_symbols, from=start_date, to=end_date)
for(i in all_symbols)
assign(i, get(i))
close_prices  <- do.call(merge, lapply(all_symbols, function(x) Cl(get(x))))
adj_prices    <- do.call(merge, lapply(all_symbols, function(x) Ad(get(x))))
returns_matrix1   <-  na.omit(diff(adj_prices)/lag(adj_prices, k = 1))
returns_monthly1  <-  returns_matrix1[endpoints(index(returns_matrix1),
on = "months"), ]
# second download
getSymbols(mom_tickers, from=start_date, to=end_date)
for(i in mom_tickers)
assign(i, get(i))
close_prices2  <- do.call(merge, lapply(mom_tickers, function(x) Cl(get(x))))
adj_prices2    <- do.call(merge, lapply(mom_tickers, function(x) Ad(get(x))))
returns_matrix2 <- na.omit(diff(adj_prices2)/lag(adj_prices2, k = 1))
returns_monthly2  <-  returns_matrix2[endpoints(index(returns_matrix2),
on = "months"), ]
# model dates
model_dates <- index(adj_prices)[85:nrow(adj_prices)]
# indicators --------------------------------------------------------------
roc1DP <- ROC(close_prices[,1:ncol(close_prices)-1], n=1,
type="discrete")*100
## Highest Momentum (ROC),
## Lowest Volatility (SD),
## Lowest Avg. Correlation
## 4-month look back
momentumIndicator <- xts(apply(roc1DP,2,SMA,n=84), index(close_prices))
volatilityIndicator <- rollapply(roc1DP[,1:ncol(close_prices)-1], 84, sd, fill=NA)
correlationIndicator <- corIndicator(universe = universe, data = roc1DP,n=84)
momentumRank    <- ranking(momentumIndicator)
volatilityRank  <- ranking(-volatilityIndicator)
correlationRank <- ranking(-correlationIndicator)
combineRankWeights <- (.50*momentumRank) + (.25*volatilityRank) + (.25*correlationRank)
compositeRank <- ranking(combineRankWeights)
colnames(compositeRank) <- universe
compositeRank[compositeRank < 9] <- 0
compositeRank[compositeRank >= 9] <- 1
# Filter: - ON - OFF Filters
momentumFilterBUY <- xts(ifelse(as.matrix(momentumIndicator) < 0, 0, 1), index(adj_prices))
# MVC portfolio -----------------------------------------------------------
strategy_nameBH <- c("Jonnie:MVC")
strategy <- as.matrix(compositeRank)*as.matrix(momentumFilterBUY) *.20
prelimallocmatrix <- xts(strategy, order.by = index(adj_prices))
prelimallocmatrix <- prelimallocmatrix[endpoints(index(prelimallocmatrix), on = "months"), ]
colnames(prelimallocmatrix) <- universe
## allocation matrix + cash
cashBH <- ifelse(rowSums(prelimallocmatrix) == 0, 1, 1 - rowSums(prelimallocmatrix))
allocmatrixBH <- cbind(prelimallocmatrix, cashBH)
colnames(allocmatrixBH) <- all_symbols
## trade matrices
prelimtradematrixBH <- allocmatrixBH
prelimtradematrixBH[is.na(prelimtradematrixBH)] <- 0
tradematrixBH <- prelimtradematrixBH - lag(prelimtradematrixBH, 1)
## friction matrices
constituenttradematrixBH <- tradematrixBH[,1:length(universe)]
frictionmatrixBH <- cbind(abs(constituenttradematrixBH) * friction_pct, 0)
## Create matrix of (monthly) returns for the portfolios
wheninvested_retsBH <- as.numeric(returns_monthly1) * lag(allocmatrixBH, 1) - frictionmatrixBH
## Calculate portfolio returns vector
port_retsBH3 <- rowSums(wheninvested_retsBH)
## Create final portfolio returns by coercing port_rets to xts object and remove NAs
port_rets_xtsBH3 <- xts(port_retsBH3, order.by = index(prelimallocmatrix))
port_returnsBH3 <- port_rets_xtsBH3[is.na(port_rets_xtsBH3) == FALSE]
colnames(port_returnsBH) <- strategy_nameBH
## Create equity curve and additional portfolio returns
port_equity_curveBH <- cumprod(1 + port_returnsBH)
port_returns_monthlyBH <- monthlyReturn(port_equity_curveBH)
# Buy and Hold (my portfolio) ---------------------------------------------
strategy_nameBH <- c("Jonnie")
bh_allocation <- 1/length(universe)
bh_initial <- matrix(1, nrow = nrow(returns_matrix1), ncol = ncol(returns_matrix1)-1)
bh_weights <- bh_initial*bh_allocation
prelimallocmatrixBH <- xts(bh_weights, order.by = index(returns_matrix1))
prelimallocmatrixBH <- prelimallocmatrixBH[endpoints(index(prelimallocmatrixBH), on = "months"), ]
colnames(prelimallocmatrixBH) <- universe
## allocation matrix + cash
cashBH <- ifelse(rowSums(prelimallocmatrixBH) == 0, 1, 1 - rowSums(prelimallocmatrixBH))
allocmatrixBH <- cbind(prelimallocmatrixBH, cashBH)
colnames(allocmatrixBH) <- all_symbols
## trade matrices
prelimtradematrixBH <- allocmatrixBH
prelimtradematrixBH[is.na(prelimtradematrixBH)] <- 0
tradematrixBH <- prelimtradematrixBH - lag(prelimtradematrixBH, 1)
## friction matrices
constituenttradematrixBH <- tradematrixBH[,1:length(universe)]
frictionmatrixBH <- cbind(abs(constituenttradematrixBH) * friction_pct, 0)
## Create matrix of (monthly) returns for the portfolios
wheninvested_retsBH <- as.numeric(returns_monthly1) * lag(allocmatrixBH, 1) - frictionmatrixBH
## Calculate portfolio returns vector
port_retsBH <- rowSums(wheninvested_retsBH)
## Create final portfolio returns by coercing port_rets to xts object and remove NAs
port_rets_xtsBH <- xts(port_retsBH, order.by = index(prelimallocmatrixBH))
port_returnsBH <- port_rets_xtsBH[is.na(port_rets_xtsBH) == FALSE]
colnames(port_returnsBH) <- strategy_nameBH
## Create equity curve and additional portfolio returns
port_equity_curveBH <- cumprod(1 + port_returnsBH)
port_returns_monthlyBH <- monthlyReturn(port_equity_curveBH)
# buy and hold (mom's portfolio) ------------------------------------------
strategy_nameBH <- c("Mom")
bh_allocation <- 1/length(mom_tickers)
bh_initial <- matrix(1, nrow = nrow(returns_matrix2), ncol = ncol(returns_matrix2))
bh_weights <- bh_initial*bh_allocation
prelimallocmatrixBH <- xts(bh_weights, order.by = index(returns_matrix2))
prelimallocmatrixBH <- prelimallocmatrixBH[endpoints(index(prelimallocmatrixBH), on = "months"), ]
colnames(prelimallocmatrixBH) <- mom_tickers
## allocation matrix + cash
allocmatrixBH <- prelimallocmatrixBH
## trade matrices
prelimtradematrixBH <- allocmatrixBH
prelimtradematrixBH[is.na(prelimtradematrixBH)] <- 0
tradematrixBH <- prelimtradematrixBH - lag(prelimtradematrixBH, 1)
## friction matrices
constituenttradematrixBH <- tradematrixBH[,1:length(mom_tickers)]
frictionmatrixBH <- cbind(abs(constituenttradematrixBH) * friction_pct)
## Create matrix of (monthly) returns for the portfolios
wheninvested_retsBH <- as.numeric(returns_monthly2) * lag(allocmatrixBH, 1) - frictionmatrixBH
## Calculate portfolio returns vector
port_retsBH <- rowSums(wheninvested_retsBH)
## Create final portfolio returns by coercing port_rets to xts object and remove NAs
port_rets_xtsBH2 <- xts(port_retsBH, order.by = index(prelimallocmatrixBH))
port_returnsBH2 <- port_rets_xtsBH2[is.na(port_rets_xtsBH2) == FALSE]
colnames(port_returnsBH) <- strategy_nameBH
## Create equity curve and additional portfolio returns
port_equity_curveBH2 <- cumprod(1 + port_returnsBH)
port_returns_monthlyBH2 <- monthlyReturn(port_equity_curveBH)
chart.CumReturns(cbind(port_returnsBH,port_returnsBH2,port_returnsBH3), wealth.index = TRUE)
rm(list = ls(all = TRUE))
options(scipen=999)
setwd("~/Dropbox/setup/quant_trading/mom_portfolio/mvc_20150109")
#setwd("C:/Users/jlappen/Dropbox/setup/mom_portfolio/mvc_20150109")
library(xts)
library(plyr)
library(quantmod)
library(PerformanceAnalytics)
# load custom functions ---------------------------------------------------
source("backtest_function.R")
source("run_corr_function.R")
source("rank_function.R")
# backtest parameters -----------------------------------------------------
start_date  <- as.Date("2007-04-01")
end_date    <- as.Date("2014-12-31")
## Define frictions (as percentage of trade)
commission_pct <- c(.0003)
slippage_pct <- c(.0005)
friction_pct <- commission_pct + slippage_pct
## Portfolio Symbols
data_source <- c("yahoo")
universe <- c("SPY", "MDY", "IWM",      # Large-Mid-Small Cap equities
"EFA", "EEM",             # Intl.and emerging markets
"AGG","TIP","TLT", "LQD", # Bonds
"GSG",                    # Commodities
"RWR", "RWX",  "MBB")     # Real Estateads
## Cash
cash_symbol <- c("SHV")
portfolio_symbols <- c(universe, cash_symbol)
# download data and compute returns ---------------------------------------
getSymbols(universe, src = data_source, from = start_date, to = end_date)
getSymbols(cash_symbol, src = data_source, from = start_date, to = end_date)
raw_close <- do.call(merge, lapply(portfolio_symbols, function(x) Cl(get(x))))
adj_close <- do.call(merge, lapply(portfolio_symbols, function(x) Ad(get(x))))
## Convert Daily to Monthly
monthly_raw  <- raw_close[endpoints(index(raw_close), on = "months"), ]
monthly_adj  <- adj_close[endpoints(index(adj_close), on = "months"), ]
monthly_rets <- diff(monthly_adj)/lag(monthly_adj, k = 1)
# market timing -----------------------------------------------------------
roc1DP <- ROC(raw_close[,1:length(universe)], n=1, type="discrete")*100
## Highest Momentum (ROC),
## Lowest Volatility (SD),
## Lowest Avg. Correlation
## 4-month look back
momentum    <- xts(apply(roc1DP, 2, SMA, n = 84), index(adj_close))
volatility  <- rollapply(roc1DP[, 1:length(universe)], 84, sd, fill = NA)
correlation <- corIndicator(universe = universe, data = roc1DP, n = 84)
moment_rank <- ranking(momentum)
vol_rank    <- ranking(-volatility)
corr_rank   <- ranking(-correlation)
all_ranks <- (.50 * moment_rank) + (.25 * vol_rank) + (.25 * corr_rank)
composite_rank <- ranking(all_ranks)
colnames(composite_rank) <- universe
composite_rank[composite_rank < 9]  <- 0
composite_rank[composite_rank >= 9] <- 1
## Filters
moment_filter <- xts(ifelse(as.matrix(momentum) < 0, 0, 1), index(adj_close))
# system 1: mvc + momentum filter -----------------------------------------
strategy1 <- (as.matrix(composite_rank) * as.matrix(moment_filter)) #* .20
strategy1 <- strategy1 * (1 / rowSums(strategy1))
strategy1 <- xts(strategy1, index(adj_close))
strategy1 <- strategy1[endpoints(index(strategy1), on = "months"), ]
# strategy 2: risk parity -------------------------------------------------
rp_buy <- as.matrix(composite_rank) * as.matrix(moment_filter)
kt_buy <- 1/rowSums(rp_buy * volatility)
kt_buy[kt_buy == Inf] <- 0
rp_weights <- kt_buy * volatility
strategy2  <- xts(rp_buy * rp_weights, index(adj_close))
strategy2  <- strategy2[endpoints(index(strategy2), on = "months"), ]
# Buy and Hold ------------------------------------------------------------
bh_allocation <- 1/length(universe)
bh_initial <- matrix(1, nrow = nrow(monthly_rets), ncol = ncol(monthly_rets) - 1)
bh_weights <- bh_initial * bh_allocation
bh_weights <- xts(bh_weights, order.by = index(monthly_rets))
bh_weights <- bh_weights[endpoints(index(bh_weights), on = "months"), ]
colnames(bh_weights) <- universe
# output ------------------------------------------------------------------
strat1_returns <- backtest_engine(strategy1, "MVC_filter", monthly_rets)
strat2_returns <- backtest_engine(strategy2, "risk_parity", monthly_rets)
bh_returns     <- backtest_engine(bh_weights, "buy_hold", monthly_rets)
port_returns_report <- cbind(strat1_returns$portfolio_returns,
bh_returns$portfolio_returns,
strat2_returns$portfolio_returns)
aa  <- table.AnnualizedReturns(cbind(port_returns_report))
bb  <- table.DownsideRisk(cbind(port_returns_report))
a   <- table.Stats(cbind(port_returns_report))
b   <- table.Variability(cbind(port_returns_report))
c   <- table.Distributions(cbind(port_returns_report))
d   <- table.DrawdownsRatio(cbind(port_returns_report))
e   <- table.DownsideRiskRatio(cbind(port_returns_report))
f   <- table.TrailingPeriods(cbind(port_returns_report))
rowBinding <- rbind(aa, bb, a, b, c, d, e, f)
charts.PerformanceSummary(port_returns_report, wealth.index = TRUE)
drawdowns_list <- list(strat1 = table.Drawdowns(strat1_returns$portfolio_returns),
strat2 = table.Drawdowns(strat2_returns$portfolio_returns),
bh     = table.Drawdowns(bh_returns$portfolio_returns))
monthly_ret_list <- list(strat1 = table.CalendarReturns(strat1_returns$portfolio_returns, digits = 2),
strat2 = table.CalendarReturns(strat2_returns$portfolio_returns, digits = 2),
bh     = table.CalendarReturns(bh_returns$portfolio_returns, digits = 2))
# final numeric tables printed to the console
rowBinding
drawdowns_list
monthly_ret_list
universe <- c("SPY", "QQQ", "IWM", "EEM", "EFA",
"TLT", "LQD", "DBC", "GLD")
## Cash
cash_symbol <- c("SHV")
portfolio_symbols <- c(universe, cash_symbol)
# download data and compute returns ---------------------------------------
getSymbols(universe, src = data_source, from = start_date, to = end_date)
getSymbols(cash_symbol, src = data_source, from = start_date, to = end_date)
raw_close <- do.call(merge, lapply(portfolio_symbols, function(x) Cl(get(x))))
adj_close <- do.call(merge, lapply(portfolio_symbols, function(x) Ad(get(x))))
## Convert Daily to Monthly
monthly_raw  <- raw_close[endpoints(index(raw_close), on = "months"), ]
monthly_adj  <- adj_close[endpoints(index(adj_close), on = "months"), ]
monthly_rets <- diff(monthly_adj)/lag(monthly_adj, k = 1)
# market timing -----------------------------------------------------------
roc1DP <- ROC(raw_close[,1:length(universe)], n=1, type="discrete")*100
## Highest Momentum (ROC),
## Lowest Volatility (SD),
## Lowest Avg. Correlation
## 4-month look back
momentum    <- xts(apply(roc1DP, 2, SMA, n = 84), index(adj_close))
volatility  <- rollapply(roc1DP[, 1:length(universe)], 84, sd, fill = NA)
correlation <- corIndicator(universe = universe, data = roc1DP, n = 84)
moment_rank <- ranking(momentum)
vol_rank    <- ranking(-volatility)
corr_rank   <- ranking(-correlation)
all_ranks <- (.50 * moment_rank) + (.25 * vol_rank) + (.25 * corr_rank)
composite_rank <- ranking(all_ranks)
colnames(composite_rank) <- universe
composite_rank[composite_rank < 9]  <- 0
composite_rank[composite_rank >= 9] <- 1
## Filters
moment_filter <- xts(ifelse(as.matrix(momentum) < 0, 0, 1), index(adj_close))
# system 1: mvc + momentum filter -----------------------------------------
strategy1 <- (as.matrix(composite_rank) * as.matrix(moment_filter)) #* .20
strategy1 <- strategy1 * (1 / rowSums(strategy1))
strategy1 <- xts(strategy1, index(adj_close))
strategy1 <- strategy1[endpoints(index(strategy1), on = "months"), ]
# strategy 2: risk parity -------------------------------------------------
rp_buy <- as.matrix(composite_rank) * as.matrix(moment_filter)
kt_buy <- 1/rowSums(rp_buy * volatility)
kt_buy[kt_buy == Inf] <- 0
rp_weights <- kt_buy * volatility
strategy2  <- xts(rp_buy * rp_weights, index(adj_close))
strategy2  <- strategy2[endpoints(index(strategy2), on = "months"), ]
# Buy and Hold ------------------------------------------------------------
bh_allocation <- 1/length(universe)
bh_initial <- matrix(1, nrow = nrow(monthly_rets), ncol = ncol(monthly_rets) - 1)
bh_weights <- bh_initial * bh_allocation
bh_weights <- xts(bh_weights, order.by = index(monthly_rets))
bh_weights <- bh_weights[endpoints(index(bh_weights), on = "months"), ]
colnames(bh_weights) <- universe
# output ------------------------------------------------------------------
strat1_returns <- backtest_engine(strategy1, "MVC_filter", monthly_rets)
strat2_returns <- backtest_engine(strategy2, "risk_parity", monthly_rets)
bh_returns     <- backtest_engine(bh_weights, "buy_hold", monthly_rets)
port_returns_report <- cbind(strat1_returns$portfolio_returns,
bh_returns$portfolio_returns,
strat2_returns$portfolio_returns)
aa  <- table.AnnualizedReturns(cbind(port_returns_report))
bb  <- table.DownsideRisk(cbind(port_returns_report))
a   <- table.Stats(cbind(port_returns_report))
b   <- table.Variability(cbind(port_returns_report))
c   <- table.Distributions(cbind(port_returns_report))
d   <- table.DrawdownsRatio(cbind(port_returns_report))
e   <- table.DownsideRiskRatio(cbind(port_returns_report))
f   <- table.TrailingPeriods(cbind(port_returns_report))
rowBinding <- rbind(aa, bb, a, b, c, d, e, f)
charts.PerformanceSummary(port_returns_report, wealth.index = TRUE)
drawdowns_list <- list(strat1 = table.Drawdowns(strat1_returns$portfolio_returns),
strat2 = table.Drawdowns(strat2_returns$portfolio_returns),
bh     = table.Drawdowns(bh_returns$portfolio_returns))
monthly_ret_list <- list(strat1 = table.CalendarReturns(strat1_returns$portfolio_returns, digits = 2),
strat2 = table.CalendarReturns(strat2_returns$portfolio_returns, digits = 2),
bh     = table.CalendarReturns(bh_returns$portfolio_returns, digits = 2))
# final numeric tables printed to the console
rowBinding
drawdowns_list
monthly_ret_list
head(adj_close)
universe <- c("SPY", "QQQ", "IWM", "EEM", "EFA",
"TLT", "LQD", "DBC", "GLD", "AGG",
"RWR","RWX","MBB")
## Cash
cash_symbol <- c("SHV")
portfolio_symbols <- c(universe, cash_symbol)
# download data and compute returns ---------------------------------------
getSymbols(universe, src = data_source, from = start_date, to = end_date)
getSymbols(cash_symbol, src = data_source, from = start_date, to = end_date)
raw_close <- do.call(merge, lapply(portfolio_symbols, function(x) Cl(get(x))))
adj_close <- do.call(merge, lapply(portfolio_symbols, function(x) Ad(get(x))))
## Convert Daily to Monthly
monthly_raw  <- raw_close[endpoints(index(raw_close), on = "months"), ]
monthly_adj  <- adj_close[endpoints(index(adj_close), on = "months"), ]
monthly_rets <- diff(monthly_adj)/lag(monthly_adj, k = 1)
# market timing -----------------------------------------------------------
roc1DP <- ROC(raw_close[,1:length(universe)], n=1, type="discrete")*100
## Highest Momentum (ROC),
## Lowest Volatility (SD),
## Lowest Avg. Correlation
## 4-month look back
momentum    <- xts(apply(roc1DP, 2, SMA, n = 84), index(adj_close))
volatility  <- rollapply(roc1DP[, 1:length(universe)], 84, sd, fill = NA)
correlation <- corIndicator(universe = universe, data = roc1DP, n = 84)
moment_rank <- ranking(momentum)
vol_rank    <- ranking(-volatility)
corr_rank   <- ranking(-correlation)
all_ranks <- (.50 * moment_rank) + (.25 * vol_rank) + (.25 * corr_rank)
composite_rank <- ranking(all_ranks)
colnames(composite_rank) <- universe
composite_rank[composite_rank < 9]  <- 0
composite_rank[composite_rank >= 9] <- 1
## Filters
moment_filter <- xts(ifelse(as.matrix(momentum) < 0, 0, 1), index(adj_close))
# system 1: mvc + momentum filter -----------------------------------------
strategy1 <- (as.matrix(composite_rank) * as.matrix(moment_filter)) #* .20
strategy1 <- strategy1 * (1 / rowSums(strategy1))
strategy1 <- xts(strategy1, index(adj_close))
strategy1 <- strategy1[endpoints(index(strategy1), on = "months"), ]
# strategy 2: risk parity -------------------------------------------------
rp_buy <- as.matrix(composite_rank) * as.matrix(moment_filter)
kt_buy <- 1/rowSums(rp_buy * volatility)
kt_buy[kt_buy == Inf] <- 0
rp_weights <- kt_buy * volatility
strategy2  <- xts(rp_buy * rp_weights, index(adj_close))
strategy2  <- strategy2[endpoints(index(strategy2), on = "months"), ]
# Buy and Hold ------------------------------------------------------------
bh_allocation <- 1/length(universe)
bh_initial <- matrix(1, nrow = nrow(monthly_rets), ncol = ncol(monthly_rets) - 1)
bh_weights <- bh_initial * bh_allocation
bh_weights <- xts(bh_weights, order.by = index(monthly_rets))
bh_weights <- bh_weights[endpoints(index(bh_weights), on = "months"), ]
colnames(bh_weights) <- universe
# output ------------------------------------------------------------------
strat1_returns <- backtest_engine(strategy1, "MVC_filter", monthly_rets)
strat2_returns <- backtest_engine(strategy2, "risk_parity", monthly_rets)
bh_returns     <- backtest_engine(bh_weights, "buy_hold", monthly_rets)
port_returns_report <- cbind(strat1_returns$portfolio_returns,
bh_returns$portfolio_returns,
strat2_returns$portfolio_returns)
aa  <- table.AnnualizedReturns(cbind(port_returns_report))
bb  <- table.DownsideRisk(cbind(port_returns_report))
a   <- table.Stats(cbind(port_returns_report))
b   <- table.Variability(cbind(port_returns_report))
c   <- table.Distributions(cbind(port_returns_report))
d   <- table.DrawdownsRatio(cbind(port_returns_report))
e   <- table.DownsideRiskRatio(cbind(port_returns_report))
f   <- table.TrailingPeriods(cbind(port_returns_report))
rowBinding <- rbind(aa, bb, a, b, c, d, e, f)
charts.PerformanceSummary(port_returns_report, wealth.index = TRUE)
drawdowns_list <- list(strat1 = table.Drawdowns(strat1_returns$portfolio_returns),
strat2 = table.Drawdowns(strat2_returns$portfolio_returns),
bh     = table.Drawdowns(bh_returns$portfolio_returns))
monthly_ret_list <- list(strat1 = table.CalendarReturns(strat1_returns$portfolio_returns, digits = 2),
strat2 = table.CalendarReturns(strat2_returns$portfolio_returns, digits = 2),
bh     = table.CalendarReturns(bh_returns$portfolio_returns, digits = 2))
# final numeric tables printed to the console
rowBinding
drawdowns_list
monthly_ret_list
rm(list = ls(all = TRUE))
gbm_function <- function(x, omega, mu, sigma, n) {
# Geometric Brownian Motion:
# x     = initial value of the process at t0
# alpha = start time
# omega = final time
# mu    = rate of return (drift)
# sigma = volatility
# n     = number of intervals in which to split [t0, t1]
dt  <- omega/n
t   <- seq(0, omega, length = n + 1)
bm  <- ts(cumsum(c(0, rnorm(n) * sqrt(dt))), start = 0, deltat = dt)
gbm <- x * exp((mu - sigma ^ 2 / 2) * time(bm) + sigma * as.numeric(bm))
out <- ts(gbm, start = 0, deltat = deltat(bm))
}
model1 <- gbm_function(x     = 5,
omega = 1,
mu    = 0.09,
sigma = 0.3,
n     = 5000)
plot(x    = seq(1, length(model1), by = 1),
y    = model1,
type = "l",
lwd  = 1.5,
col  = "#31a354",
ylab = "$",
xlab = "# of Observations")
